{"version":3,"sources":["types/SortTypes.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","ALL","filterReducer","arr","initialTodos","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","errorMessage","dispatch","selectTodo","className","map","id","completed","title","classNames","onClick","todoId","findTodo","find","currentTodoActions","handleClick","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","useState","user","setUser","setErrorMessage","isLoading","setIsLoading","useEffect","fetchUser","a","userId","responce","Error","message","email","name","actionsCurrent","href","App","filterState","loadTodos","loadedTodos","actionTodos","visibleTodos","useMemo","filteredTodos","lowerCaseQuery","toLowerCase","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20e34396.chunk.js","sourcesContent":["export enum SortType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { SortType } from '../types/SortTypes';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: SortType;\n};\n\ntype SetClearAction = {\n  type: 'filter/SET_CLEAR';\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: SortType): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst clearFilter = (): SetClearAction => ({\n  type: 'filter/SET_CLEAR',\n});\n\nexport const actions = { setQuery, setStatus, clearFilter };\n\nexport interface FilterState {\n  query: string;\n  status: SortType;\n}\n\nconst initialState: FilterState = {\n  query: '',\n  status: SortType.ALL,\n};\n\nconst filterReducer = (\n  state: FilterState = initialState,\n  action: SetQueryAction | SetStatusAction | SetClearAction,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/SET_CLEAR':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAddAction = {\n  type: 'todos/SET_ADD',\n  payload: Todo[],\n};\n\nconst SetAdd = (arr: Todo[]): SetAddAction => ({\n  type: 'todos/SET_ADD',\n  payload: arr,\n});\n\nexport const actions = { SetAdd };\n\nconst initialTodos: Todo[] = [];\n\nconst todosReducer = (\n  state = initialTodos,\n  action: SetAddAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET_ADD':\n      return [...action.payload, ...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[];\n  errorMessage: string,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, errorMessage }) => {\n  const dispatch = useAppDispatch();\n  const selectTodo = useAppSelector((state) => state.currentTodo);\n\n  const handleClick = (todoId: number) => {\n    const findTodo = todos.find(todo => todo.id === todoId);\n\n    if (findTodo) {\n      dispatch(currentTodoActions.setTodo(findTodo));\n    }\n  };\n\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {!errorMessage\n            ? todos.map(({ id, completed, title }) => (\n              <tr\n                key={id}\n                data-cy=\"todo\"\n              >\n                <td className=\"is-vcentered\">{id}</td>\n                <td className=\"is-vcentered\">\n                  {completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames({\n                      'has-text-danger': !completed,\n                      'has-text-success': completed,\n                    })}\n                  >\n                    {title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleClick(id)}\n                  >\n                    <span className=\"icon\">\n                      {selectTodo && selectTodo.id === id\n                        ? <i className=\"far fa-eye-slash\" />\n                        : <i className=\"far fa-eye\" />}\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))\n            : <td>{errorMessage}</td>}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { SortType } from '../../types/SortTypes';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { status, query } = useAppSelector((state) => state.filter);\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as SortType));\n  };\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleClearSerch = () => {\n    dispatch(filterActions.clearFilter());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleFilterChange}\n          >\n            <option value={SortType.ALL}>All</option>\n            <option value={SortType.ACTIVE}>Active</option>\n            <option value={SortType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSearchChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query\n            && (\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleClearSerch}\n                aria-label=\"delete\"\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrent } from '../../features/currentTodo';\n\nconst errorText = 'User not found';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string>('User not found');\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        if (selectedTodo) {\n          const responce = await getUser(selectedTodo.userId);\n\n          setUser(responce);\n          setIsLoading(false);\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          setErrorMessage(error.message);\n        }\n\n        setIsLoading(false);\n      }\n    };\n\n    fetchUser();\n  }, [selectedTodo]);\n\n  const { id, title, completed } = selectedTodo || {};\n  const { email, name } = user || {};\n\n  const closeTodo = () => {\n    dispatch(actionsCurrent.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeTodo}\n              aria-label=\"delete\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n            {errorMessage !== errorText || !user\n              ? <p>{errorMessage}</p>\n              : (\n                <span>\n                  <p className=\"block\" data-cy=\"modal-user\">\n                    {completed\n                      ? <strong className=\"has-text-success\">Done </strong>\n                      : <strong className=\"has-text-danger\">Planned </strong>}\n\n                    <a href={`mailto:${email}`}>\n                      {`by ${name}`}\n                    </a>\n                  </p>\n                </span>\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { actions as actionTodos } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { SortType } from './types/SortTypes';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector((state) => state.todos);\n  const filterState = useAppSelector((state) => state.filter);\n  const selectTodo = useAppSelector((state) => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      try {\n        const loadedTodos = await getTodos();\n\n        dispatch(actionTodos.SetAdd(loadedTodos));\n      } catch (error) {\n        setErrorMessage('An error occurred while loading todos.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    let filteredTodos = [...todos];\n\n    switch (filterState.status) {\n      case SortType.ACTIVE:\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n\n      case SortType.COMPLETED:\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n\n      default:\n        break;\n    }\n\n    if (filterState.query) {\n      const lowerCaseQuery = filterState.query.toLowerCase();\n\n      filteredTodos = filteredTodos\n        .filter(todo => todo.title.toLowerCase().includes(lowerCaseQuery));\n    }\n\n    return filteredTodos;\n  }, [todos, filterState]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              <TodoList\n                errorMessage={errorMessage}\n                todos={visibleTodos}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}